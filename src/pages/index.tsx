/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */

import { AnimateSharedLayout } from "framer-motion";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import Modal from "../components/Modal";
import TabBtn from "../components/TabBtn";
import AuthTab from "../components/Tabs/AuthTab";
import ContentTab from "../components/Tabs/ContentTab";
import HeadersTab from "../components/Tabs/HeadersTab";
import { Auth, Content } from "../types";
import Error from "../components/Error";

const Home: NextPage = () => {

  const [tab, setTab] = useState(0);
  const [auth, setAuth] = useState<Auth>({
    selected: "none",
    bearer: "",
    basic: {
      username: "",
      password: ""
    },
    custom: ""
  });
  const [content, setContent] = useState<Content>({
    type: "application/json",
    content: "{}"
  });
  const [headers, setHeaders] = useState("{}");

  const [url, setUrl] = useState("");
  const [method, setMethod] = useState<"GET" | "POST" | "PUT" | "PATCH" | "OPTIONS" | "DELETE" | "HEAD">("GET");
  const [open, setOpen] = useState(false);

  const [resp, setResp] = useState<any | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (url.trim() === "" || ( !url.startsWith("http://") && !url.startsWith("https://") )) setError("Invalid URL");
    else setError(null);
  },[url])

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="px-2 min-h-screen text-light-dark py-7 bg-dark">
        <Modal open={open} setOpen={setOpen}>
          {resp && (
            <>
              <div className="mt-4 flex flex-col gap-2">
                <div className="flex justify-center items-center gap-5">
                  <div
                    className={`
                      ${(`${resp.status}`).startsWith("2") && "text-green-500"} 
                      ${(`${resp.status}`).startsWith("4") || (`${resp.status}`).startsWith("5") && "text-red-500"}
                      ${(`${resp.status}`).startsWith("1") || (`${resp.status}`).startsWith("3") && "text-yellow-400"}

                      flex justify-center items-center gap-1 text-xl

                    `}
                  >
                    <svg width="1em" height="1em" viewBox="0 0 24 24">
                      <path fill="currentColor" d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10s10-4.47 10-10S17.53 2 12 2z" />
                    </svg>
                    {resp.status}
                  </div>
                  <div
                    className={`
                      ${resp.time_taken < 1000 && "text-green-500"} 
                      ${resp.time_taken > 5000 && "text-red-500"}

                      flex justify-center items-center gap-1 text-xl

                    `}
                  >
                    <svg width="1em" height="1em" viewBox="0 0 24 24">
                      <path fill="currentColor" d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10s10-4.47 10-10S17.53 2 12 2z" />
                    </svg>
                    {resp.time_taken}ms
                  </div>
                </div>
              </div>
            </>
          )}
          {loading && (
            <div className="flex w-full h-[200px] justify-center items-center">
              <svg className="-ml-1 mr-3 h-5 w-5 text-purple-400 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </div>
          )}
        </Modal>
        <div className="flex justify-center items-center">
          <button className="cool hover:underline hover:decoration-wavy decoration-1 underline-offset-2 decoration-purple-400 font-extrabold text-5xl text-center text-transparent bg-clip-text bg-gradient-to-r from-rose-500 via-purple-400 to-pink-200 animate-gradient-text">
            ReqCool
          </button>
        </div>

        <div className="flex w-full mt-5 justify-center items-center">
          <div className="w-full md:max-w-[600px]">
            <Error error={error} />
            <div className="gap-1 flex">
              <input onChange={(e) => setUrl(e.target.value)} placeholder="https://" className="w-full bg-dark-light rounded-md border-2 border-transparent flex-grow focus:border-purple-400 text-purple-400 px-3 py-2 focus:outline-none" />
              <select
                // @ts-ignore
                onChange={(e) => setMethod(e.target.value)}
                className="bg-dark-light text-purple-400 px-2 py-2 rounded-md focus:outline-none focus:border-purple-400 border-2 border-transparent"
              >
                <option>GET</option>
                <option>POST</option>
                <option>PUT</option>
                <option>PATCH</option>
                <option>DELETE</option>
                <option>HEAD</option>
                <option>OPTIONS</option>
              </select>
              <button
                onClick={async () => {
                  if (error) {
                    setError(prev => prev);
                    return;
                  }
                  setLoading(true);
                  setOpen(true);
                  const resp = await fetch(`/api/make_request`, {
                    method: "POST",
                    body: JSON.stringify({
                      url: url, method: method, headers: headers, auth: auth, content: content
                    })
                  })
                  const data = await resp.json();
                  setResp(data);
                  setLoading(false)
                }}
                className="px-3 focus:outline-none focus:bg-purple-400 py-2 rounded-md border-2 border-purple-400 hover:bg-purple-400 bg-dark-light"
              >
                Send
              </button>
            </div>

            <div className="mt-5">
              <div className="flex gap-1">
                <AnimateSharedLayout>

                  <TabBtn
                    text="Authorization"
                    tab={tab}
                    setTab={setTab}
                    my={0}
                  />
                  <TabBtn
                    text="Content"
                    tab={tab}
                    setTab={setTab}
                    my={1}
                  />
                  <TabBtn
                    text="Headers"
                    tab={tab}
                    setTab={setTab}
                    my={2}
                  />
                </AnimateSharedLayout>
              </div>
              {tab === 0 && <AuthTab val={auth} setVal={setAuth} />}
              {tab === 1 && <ContentTab val={content} setVal={setContent} />}
              {tab === 2 && <HeadersTab val={headers} setVal={setHeaders} />}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Home;